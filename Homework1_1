{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 53,
      "id": "d77a372a",
      "metadata": {
        "id": "d77a372a"
      },
      "outputs": [],
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torchvision\n",
        "from torchvision import transforms\n",
        "from matplotlib import pyplot as plt\n",
        "import os"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 54,
      "id": "a3118906",
      "metadata": {
        "id": "a3118906",
        "outputId": "d331749a-6caf-47e3-d8d8-aec3933a6a51",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ],
      "source": [
        "print(torch.cuda.is_available())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 55,
      "id": "bce74a36",
      "metadata": {
        "id": "bce74a36"
      },
      "outputs": [],
      "source": [
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 56,
      "id": "9cc0c1f2",
      "metadata": {
        "id": "9cc0c1f2"
      },
      "outputs": [],
      "source": [
        "def init_cnn(module):\n",
        "    if type(module) == nn.Linear or type(module) == nn.Conv2d:\n",
        "        nn.init.xavier_uniform_(module.weight)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 57,
      "id": "c88b1e49",
      "metadata": {
        "id": "c88b1e49"
      },
      "outputs": [],
      "source": [
        "class LeNet(nn.Module):\n",
        "    def __init__(self, lr=0.1, num_classes=10):\n",
        "        super(LeNet, self).__init__()\n",
        "        self.net = nn.Sequential(\n",
        "            nn.LazyConv2d(6, kernel_size=5, padding=2), nn.Sigmoid(),\n",
        "            nn.AvgPool2d(kernel_size=2, stride=2),\n",
        "            nn.LazyConv2d(16, kernel_size=5), nn.Sigmoid(),\n",
        "            nn.AvgPool2d(kernel_size=2, stride=2),\n",
        "            nn.Flatten(),\n",
        "            nn.LazyLinear(120), nn.Sigmoid(),\n",
        "            nn.LazyLinear(84), nn.Sigmoid(),\n",
        "            nn.LazyLinear(num_classes))\n",
        "    def forward(self, x):\n",
        "        modelOutput = self.net(x)\n",
        "        return modelOutput\n",
        "    def layer_summary(self, X_shape):\n",
        "        X = torch.randn(*X_shape)\n",
        "        for layer in self.net:\n",
        "            X = layer(X)\n",
        "            print(layer.__class__.__name__, 'output shape:\\t', X.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 58,
      "id": "5e96223c",
      "metadata": {
        "id": "5e96223c"
      },
      "outputs": [],
      "source": [
        "class ModernLeNet(nn.Module):\n",
        "    def __init__(self, lr=0.001, num_classes=10):\n",
        "        super(ModernLeNet, self).__init__()\n",
        "        self.net = nn.Sequential(\n",
        "            nn.LazyConv2d(6, kernel_size=5, padding=2), nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_size=2, stride=2),\n",
        "            nn.LazyConv2d(16, kernel_size=5), nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_size=2, stride=2),\n",
        "            nn.Flatten(),\n",
        "            nn.LazyLinear(120), nn.ReLU(),\n",
        "            nn.LazyLinear(84), nn.ReLU(),\n",
        "            nn.LazyLinear(num_classes))\n",
        "    def forward(self, x):\n",
        "        return self.net(x)\n",
        "    def layer_summary(self, X_shape):\n",
        "        X = torch.randn(*X_shape)\n",
        "        for layer in self.net:\n",
        "            X=layer(X)\n",
        "            print(layer.__class__.__name__, 'output shape:\\t', X.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 59,
      "id": "1dc0b4ad",
      "metadata": {
        "id": "1dc0b4ad"
      },
      "outputs": [],
      "source": [
        "class ModernLeNet2(nn.Module):\n",
        "    def __init__(self, lr=0.001, num_classes=10):\n",
        "        super(ModernLeNet2, self).__init__()\n",
        "        self.net = nn.Sequential(\n",
        "            nn.LazyConv2d(6, kernel_size=2, padding=2), nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_size=2, stride=2),\n",
        "            nn.LazyConv2d(16, kernel_size=2), nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_size=2, stride=2),\n",
        "            nn.Flatten(),\n",
        "            nn.LazyLinear(120), nn.ReLU(),\n",
        "            nn.LazyLinear(84), nn.ReLU(),\n",
        "            nn.LazyLinear(num_classes))\n",
        "    def forward(self, x):\n",
        "        return self.net(x)\n",
        "    def layer_summary(self, X_shape):\n",
        "        X = torch.randn(*X_shape)\n",
        "        for layer in self.net:\n",
        "            X=layer(X)\n",
        "            print(layer.__class__.__name__, 'output shape:\\t', X.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 60,
      "id": "1e40648c",
      "metadata": {
        "id": "1e40648c"
      },
      "outputs": [],
      "source": [
        "class ModernLeNet3(nn.Module):\n",
        "    def __init__(self, lr=0.001, num_classes=10):\n",
        "        super(ModernLeNet3, self).__init__()\n",
        "        self.net = nn.Sequential(\n",
        "            nn.LazyConv2d(12, kernel_size=5, padding=2), nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_size=2, stride=2),\n",
        "            nn.LazyConv2d(24, kernel_size=5), nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_size=2, stride=2),\n",
        "            nn.Flatten(),\n",
        "            nn.LazyLinear(180), nn.ReLU(),\n",
        "            nn.LazyLinear(108), nn.ReLU(),\n",
        "            nn.LazyLinear(num_classes))\n",
        "    def forward(self, x):\n",
        "        return self.net(x)\n",
        "    def layer_summary(self, X_shape):\n",
        "        X = torch.randn(*X_shape)\n",
        "        for layer in self.net:\n",
        "            X=layer(X)\n",
        "            print(layer.__class__.__name__, 'output shape:\\t', X.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 61,
      "id": "8557de61",
      "metadata": {
        "id": "8557de61"
      },
      "outputs": [],
      "source": [
        "class ModernLeNet4(nn.Module):\n",
        "    def __init__(self, lr=0.001, num_classes=10):\n",
        "        super(ModernLeNet4, self).__init__()\n",
        "        self.net = nn.Sequential(\n",
        "            nn.LazyConv2d(6, kernel_size=5, padding=2), nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_size=2, stride=2),\n",
        "            nn.LazyConv2d(16, kernel_size=5, padding=4), nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_size=2, stride=2),\n",
        "            nn.LazyConv2d(36, kernel_size=5), nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_size=2, stride=2),\n",
        "            nn.Flatten(),\n",
        "            nn.LazyLinear(120), nn.ReLU(),\n",
        "            nn.LazyLinear(84), nn.ReLU(),\n",
        "            nn.LazyLinear(num_classes))\n",
        "    def forward(self, x):\n",
        "        return self.net(x)\n",
        "    def layer_summary(self, X_shape):\n",
        "        X = torch.randn(*X_shape)\n",
        "        for layer in self.net:\n",
        "            X=layer(X)\n",
        "            print(layer.__class__.__name__, 'output shape:\\t', X.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 62,
      "id": "3dff2ac4",
      "metadata": {
        "id": "3dff2ac4"
      },
      "outputs": [],
      "source": [
        "class ModernLeNet5(nn.Module):\n",
        "    def __init__(self, lr=0.001, num_classes=10):\n",
        "        super(ModernLeNet5, self).__init__()\n",
        "        self.net = nn.Sequential(\n",
        "            nn.LazyConv2d(16, kernel_size=5), nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_size=2, stride=2),\n",
        "            nn.Flatten(),\n",
        "            nn.LazyLinear(120), nn.ReLU(),\n",
        "            nn.LazyLinear(84), nn.ReLU(),\n",
        "            nn.LazyLinear(num_classes))\n",
        "    def forward(self, x):\n",
        "        return self.net(x)\n",
        "    def layer_summary(self, X_shape):\n",
        "        X = torch.randn(*X_shape)\n",
        "        for layer in self.net:\n",
        "            X=layer(X)\n",
        "            print(layer.__class__.__name__, 'output shape:\\t', X.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 63,
      "id": "69811a4e",
      "metadata": {
        "id": "69811a4e",
        "outputId": "902f0764-1dea-4bea-c14d-a8f2485daee2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Conv2d output shape:\t torch.Size([1, 6, 28, 28])\n",
            "Sigmoid output shape:\t torch.Size([1, 6, 28, 28])\n",
            "AvgPool2d output shape:\t torch.Size([1, 6, 14, 14])\n",
            "Conv2d output shape:\t torch.Size([1, 16, 10, 10])\n",
            "Sigmoid output shape:\t torch.Size([1, 16, 10, 10])\n",
            "AvgPool2d output shape:\t torch.Size([1, 16, 5, 5])\n",
            "Flatten output shape:\t torch.Size([1, 400])\n",
            "Linear output shape:\t torch.Size([1, 120])\n",
            "Sigmoid output shape:\t torch.Size([1, 120])\n",
            "Linear output shape:\t torch.Size([1, 84])\n",
            "Sigmoid output shape:\t torch.Size([1, 84])\n",
            "Linear output shape:\t torch.Size([1, 10])\n"
          ]
        }
      ],
      "source": [
        "model = LeNet()\n",
        "model.layer_summary((1, 1, 28, 28))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 64,
      "id": "d26afb4d",
      "metadata": {
        "id": "d26afb4d",
        "outputId": "e316f507-7659-49e4-ccdf-46b96767b870",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Conv2d output shape:\t torch.Size([1, 6, 28, 28])\n",
            "ReLU output shape:\t torch.Size([1, 6, 28, 28])\n",
            "MaxPool2d output shape:\t torch.Size([1, 6, 14, 14])\n",
            "Conv2d output shape:\t torch.Size([1, 16, 10, 10])\n",
            "ReLU output shape:\t torch.Size([1, 16, 10, 10])\n",
            "MaxPool2d output shape:\t torch.Size([1, 16, 5, 5])\n",
            "Flatten output shape:\t torch.Size([1, 400])\n",
            "Linear output shape:\t torch.Size([1, 120])\n",
            "ReLU output shape:\t torch.Size([1, 120])\n",
            "Linear output shape:\t torch.Size([1, 84])\n",
            "ReLU output shape:\t torch.Size([1, 84])\n",
            "Linear output shape:\t torch.Size([1, 10])\n"
          ]
        }
      ],
      "source": [
        "modern_model = ModernLeNet()\n",
        "modern_model.layer_summary((1,1,28,28))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 65,
      "id": "00eaaa34",
      "metadata": {
        "id": "00eaaa34",
        "outputId": "4a86a633-21d3-48c4-aa3d-37c730774142",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Conv2d output shape:\t torch.Size([1, 12, 28, 28])\n",
            "ReLU output shape:\t torch.Size([1, 12, 28, 28])\n",
            "MaxPool2d output shape:\t torch.Size([1, 12, 14, 14])\n",
            "Conv2d output shape:\t torch.Size([1, 24, 10, 10])\n",
            "ReLU output shape:\t torch.Size([1, 24, 10, 10])\n",
            "MaxPool2d output shape:\t torch.Size([1, 24, 5, 5])\n",
            "Flatten output shape:\t torch.Size([1, 600])\n",
            "Linear output shape:\t torch.Size([1, 180])\n",
            "ReLU output shape:\t torch.Size([1, 180])\n",
            "Linear output shape:\t torch.Size([1, 108])\n",
            "ReLU output shape:\t torch.Size([1, 108])\n",
            "Linear output shape:\t torch.Size([1, 10])\n"
          ]
        }
      ],
      "source": [
        "improved_modern_model2 = ModernLeNet3()\n",
        "improved_modern_model2.layer_summary((1,1,28,28))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 66,
      "id": "b10f0551",
      "metadata": {
        "id": "b10f0551",
        "outputId": "32ba6062-fc75-45a4-c7fb-b12d903b770f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Conv2d output shape:\t torch.Size([1, 6, 28, 28])\n",
            "ReLU output shape:\t torch.Size([1, 6, 28, 28])\n",
            "MaxPool2d output shape:\t torch.Size([1, 6, 14, 14])\n",
            "Conv2d output shape:\t torch.Size([1, 16, 18, 18])\n",
            "ReLU output shape:\t torch.Size([1, 16, 18, 18])\n",
            "MaxPool2d output shape:\t torch.Size([1, 16, 9, 9])\n",
            "Conv2d output shape:\t torch.Size([1, 36, 5, 5])\n",
            "ReLU output shape:\t torch.Size([1, 36, 5, 5])\n",
            "MaxPool2d output shape:\t torch.Size([1, 36, 2, 2])\n",
            "Flatten output shape:\t torch.Size([1, 144])\n",
            "Linear output shape:\t torch.Size([1, 120])\n",
            "ReLU output shape:\t torch.Size([1, 120])\n",
            "Linear output shape:\t torch.Size([1, 84])\n",
            "ReLU output shape:\t torch.Size([1, 84])\n",
            "Linear output shape:\t torch.Size([1, 10])\n"
          ]
        }
      ],
      "source": [
        "improved_modern_model3 = ModernLeNet4()\n",
        "improved_modern_model3.layer_summary((1,1,28,28))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 67,
      "id": "7c863218",
      "metadata": {
        "id": "7c863218",
        "outputId": "85ec5c6a-ca4d-40ce-d25b-f3794f4ad752",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Conv2d output shape:\t torch.Size([1, 16, 24, 24])\n",
            "ReLU output shape:\t torch.Size([1, 16, 24, 24])\n",
            "MaxPool2d output shape:\t torch.Size([1, 16, 12, 12])\n",
            "Flatten output shape:\t torch.Size([1, 2304])\n",
            "Linear output shape:\t torch.Size([1, 120])\n",
            "ReLU output shape:\t torch.Size([1, 120])\n",
            "Linear output shape:\t torch.Size([1, 84])\n",
            "ReLU output shape:\t torch.Size([1, 84])\n",
            "Linear output shape:\t torch.Size([1, 10])\n"
          ]
        }
      ],
      "source": [
        "improved_modern_model4 = ModernLeNet5()\n",
        "improved_modern_model4.layer_summary((1,1,28,28))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 68,
      "id": "6c5a352f",
      "metadata": {
        "id": "6c5a352f"
      },
      "outputs": [],
      "source": [
        "train_data = torchvision.datasets.FashionMNIST(root='./data',\n",
        "                                              train=True,\n",
        "                                              transform=transforms.ToTensor(),\n",
        "                                              download = True)\n",
        "val_data = torchvision.datasets.FashionMNIST(root='./data',\n",
        "                                            train=False,\n",
        "                                            transform=transforms.ToTensor(),\n",
        "                                            download=True)\n",
        "train_loader = torch.utils.data.DataLoader(dataset=train_data,\n",
        "                                          batch_size=100,\n",
        "                                          shuffle=True, num_workers=os.cpu_count())\n",
        "val_loader = torch.utils.data.DataLoader(dataset=val_data,\n",
        "                                        batch_size=100,\n",
        "                                        shuffle=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 69,
      "id": "b41ae991",
      "metadata": {
        "id": "b41ae991"
      },
      "outputs": [],
      "source": [
        "model = LeNet().to(device)\n",
        "modern_model = ModernLeNet().to(device)\n",
        "improved_modern_model = ModernLeNet2().to(device)\n",
        "improved_modern_model2 = ModernLeNet3().to(device)\n",
        "improved_modern_model3 = ModernLeNet4().to(device)\n",
        "improved_modern_model4 = ModernLeNet5().to(device)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 70,
      "id": "98d165c3",
      "metadata": {
        "id": "98d165c3"
      },
      "outputs": [],
      "source": [
        "lossCriterion = nn.CrossEntropyLoss()\n",
        "optim = torch.optim.Adam(model.parameters(), lr=0.001)\n",
        "optim2 = torch.optim.Adam(modern_model.parameters(), lr=0.001)\n",
        "optim3 = torch.optim.Adam(improved_modern_model.parameters(), lr=0.001)\n",
        "optim4 = torch.optim.Adam(improved_modern_model2.parameters(), lr=0.001)\n",
        "optim5 = torch.optim.Adam(improved_modern_model3.parameters(), lr=0.001)\n",
        "optim6 = torch.optim.Adam(improved_modern_model4.parameters(), lr=0.001)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 71,
      "id": "609b0920",
      "metadata": {
        "id": "609b0920",
        "outputId": "576e416f-701e-4ea8-ef54-02612582baa4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 540x252 with 6 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "imageExamples = iter(val_loader)\n",
        "example_data, example_targets = next(imageExamples)\n",
        "\n",
        "for i in range(6):\n",
        "    plt.subplot(2,3,i+1)\n",
        "    plt.imshow(example_data[i][0], cmap='gray')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 72,
      "id": "6d2ad6e9",
      "metadata": {
        "id": "6d2ad6e9",
        "outputId": "f1f4bce7-65a8-4ed9-c4b4-e66c7fedb757",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [2/20], train loss: 0.7733, val loss: 0.6186, val_acc: 0.7434 %\n",
            "Epoch [4/20], train loss: 0.6574, val loss: 0.5454, val_acc: 0.7895 %\n",
            "Epoch [6/20], train loss: 0.3238, val loss: 0.5310, val_acc: 0.8137 %\n",
            "Epoch [8/20], train loss: 0.3019, val loss: 0.4988, val_acc: 0.8291 %\n",
            "Epoch [10/20], train loss: 0.3596, val loss: 0.4741, val_acc: 0.8364 %\n",
            "Epoch [12/20], train loss: 0.2934, val loss: 0.4284, val_acc: 0.8466 %\n",
            "Epoch [14/20], train loss: 0.5177, val loss: 0.3922, val_acc: 0.8441 %\n",
            "Epoch [16/20], train loss: 0.3484, val loss: 0.3969, val_acc: 0.8579 %\n",
            "Epoch [18/20], train loss: 0.3256, val loss: 0.3652, val_acc: 0.8659 %\n",
            "Epoch [20/20], train loss: 0.3804, val loss: 0.3767, val_acc: 0.8692 %\n"
          ]
        }
      ],
      "source": [
        "#training of original LeNet Model\n",
        "num_epochs = 20\n",
        "valid_loss = [None] * 20\n",
        "training_loss = [None] * 20\n",
        "valid_acc = [None] * 20\n",
        "index = 0\n",
        "for epoch in range(num_epochs):\n",
        "    n_correct_pred = 0\n",
        "    n_samples = 0\n",
        "    for i, (images, labels) in enumerate(train_loader):\n",
        "        images = images.to(device)\n",
        "        labels = labels.to(device)\n",
        "        \n",
        "        outputs = model(images)\n",
        "        loss = lossCriterion(outputs, labels)\n",
        "        \n",
        "        optim.zero_grad()\n",
        "        loss.backward()\n",
        "        optim.step()\n",
        "        \n",
        "    with torch.no_grad():\n",
        "        for j, (valImages, valLabels) in enumerate(val_loader):\n",
        "            valImages = valImages.to(device)\n",
        "            valLabels = valLabels.to(device)\n",
        "            outputs = model(valImages)\n",
        "            val_loss = lossCriterion(outputs, valLabels)\n",
        "            _, pred = torch.max(outputs.data, 1)\n",
        "            n_samples += valLabels.size(0)\n",
        "            n_correct_pred += (pred == valLabels).sum().item()\n",
        "    \n",
        "    val_acc = (n_correct_pred / n_samples)\n",
        "    valid_loss[index] = val_loss.item()\n",
        "    training_loss[index] = loss.item()\n",
        "    valid_acc[index] = val_acc\n",
        "    index += 1\n",
        "    if (epoch+1) % 2 == 0:\n",
        "        print(f'Epoch [{epoch+1}/{num_epochs}], train loss: {loss.item():.4f}, val loss: {val_loss.item():.4f}, val_acc: {val_acc:.4f} %')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = [None]*20\n",
        "for i in range(20):\n",
        "  epochs[i] = i+1\n",
        "plt.rcParams[\"figure.figsize\"] = [7.50, 3.50]\n",
        "plt.rcParams[\"figure.autolayout\"] = True\n",
        "\n",
        "plt.title(\"Validation Accuracy/Loss and Training Loss vs No. Epochs\")\n",
        "plt.xlabel(\"Number of epochs\")\n",
        "plt.plot(epochs, valid_acc, label=\"Validation Accuracy\", color=\"red\")\n",
        "plt.plot(epochs, training_loss, label=\"Training Loss\", color=\"purple\")\n",
        "plt.plot(epochs, valid_loss, label=\"Validation Loss\", color=\"Green\")\n",
        "\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "6XV6iGAgYk6H",
        "outputId": "21904e92-c089-4816-9c0c-9c603fdb7421",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        }
      },
      "id": "6XV6iGAgYk6H",
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 540x252 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 74,
      "id": "aa90ebda",
      "metadata": {
        "id": "aa90ebda",
        "outputId": "d1900d6c-3d44-4ac7-e15a-816056567d92",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [2/20], train loss: 0.3803, val loss: 0.3711, val_acc: 0.8515 %\n",
            "Epoch [4/20], train loss: 0.3619, val loss: 0.3252, val_acc: 0.8723 %\n",
            "Epoch [6/20], train loss: 0.2851, val loss: 0.3549, val_acc: 0.8855 %\n",
            "Epoch [8/20], train loss: 0.2149, val loss: 0.3331, val_acc: 0.8937 %\n",
            "Epoch [10/20], train loss: 0.2691, val loss: 0.3990, val_acc: 0.8939 %\n",
            "Epoch [12/20], train loss: 0.3353, val loss: 0.3392, val_acc: 0.8972 %\n",
            "Epoch [14/20], train loss: 0.2364, val loss: 0.4139, val_acc: 0.9020 %\n",
            "Epoch [16/20], train loss: 0.0979, val loss: 0.3259, val_acc: 0.9051 %\n",
            "Epoch [18/20], train loss: 0.1920, val loss: 0.3452, val_acc: 0.8989 %\n",
            "Epoch [20/20], train loss: 0.1567, val loss: 0.4656, val_acc: 0.9025 %\n"
          ]
        }
      ],
      "source": [
        "#training of modernized LeNet Model with MaxPooling and ReLU activation function\n",
        "num_epochs = 20\n",
        "valid_loss = [None] * 20\n",
        "training_loss = [None] * 20\n",
        "valid_acc = [None] * 20\n",
        "index = 0\n",
        "for epoch in range(num_epochs):\n",
        "    n_correct_pred = 0\n",
        "    n_samples = 0\n",
        "    for i, (images, labels) in enumerate(train_loader):\n",
        "        images = images.to(device)\n",
        "        labels = labels.to(device)\n",
        "        \n",
        "        outputs = modern_model(images)\n",
        "        loss = lossCriterion(outputs, labels)\n",
        "        \n",
        "        optim2.zero_grad()\n",
        "        loss.backward()\n",
        "        optim2.step()\n",
        "        \n",
        "    with torch.no_grad():\n",
        "        for j, (valImages, valLabels) in enumerate(val_loader):\n",
        "            valImages = valImages.to(device)\n",
        "            valLabels = valLabels.to(device)\n",
        "            outputs = modern_model(valImages)\n",
        "            val_loss = lossCriterion(outputs, valLabels)\n",
        "            _, pred = torch.max(outputs.data, 1)\n",
        "            n_samples += valLabels.size(0)\n",
        "            n_correct_pred += (pred == valLabels).sum().item()\n",
        "\n",
        "    val_acc = (n_correct_pred / n_samples)\n",
        "    valid_loss[index] = val_loss.item()\n",
        "    training_loss[index] = loss.item()\n",
        "    valid_acc[index] = val_acc\n",
        "    index += 1\n",
        "    if (epoch+1) % 2 == 0:\n",
        "        print(f'Epoch [{epoch+1}/{num_epochs}], train loss: {loss.item():.4f}, val loss: {val_loss.item():.4f}, val_acc: {val_acc:.4f} %')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = [None]*20\n",
        "for i in range(20):\n",
        "  epochs[i] = i+1\n",
        "plt.rcParams[\"figure.figsize\"] = [7.50, 3.50]\n",
        "plt.rcParams[\"figure.autolayout\"] = True\n",
        "\n",
        "plt.title(\"Validation Accuracy/Loss and Training Loss vs No. Epochs\")\n",
        "plt.xlabel(\"Number of epochs\")\n",
        "plt.plot(epochs, valid_acc, label=\"Validation Accuracy\", color=\"red\")\n",
        "plt.plot(epochs, training_loss, label=\"Training Loss\", color=\"purple\")\n",
        "plt.plot(epochs, valid_loss, label=\"Validation Loss\", color=\"Green\")\n",
        "\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "Suj1fhYCZo1Q",
        "outputId": "3d4801ee-d05b-4744-bbaf-4802e2d8e9d8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        }
      },
      "id": "Suj1fhYCZo1Q",
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 540x252 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 76,
      "id": "0aaa1cab",
      "metadata": {
        "id": "0aaa1cab",
        "outputId": "8dd7aec2-2d03-40d1-df86-ffa9e54ec121",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [2/20], train loss: 0.5118, val loss: 0.4670, val_acc: 0.8662 %\n",
            "Epoch [4/20], train loss: 0.3109, val loss: 0.4037, val_acc: 0.8560 %\n",
            "Epoch [6/20], train loss: 0.3556, val loss: 0.3474, val_acc: 0.8900 %\n",
            "Epoch [8/20], train loss: 0.1341, val loss: 0.3395, val_acc: 0.8953 %\n",
            "Epoch [10/20], train loss: 0.2009, val loss: 0.3742, val_acc: 0.8928 %\n",
            "Epoch [12/20], train loss: 0.2061, val loss: 0.2806, val_acc: 0.9028 %\n",
            "Epoch [14/20], train loss: 0.2732, val loss: 0.3591, val_acc: 0.9024 %\n",
            "Epoch [16/20], train loss: 0.1956, val loss: 0.3430, val_acc: 0.9005 %\n",
            "Epoch [18/20], train loss: 0.1986, val loss: 0.2699, val_acc: 0.9073 %\n",
            "Epoch [20/20], train loss: 0.1583, val loss: 0.3044, val_acc: 0.9085 %\n"
          ]
        }
      ],
      "source": [
        "#training of improved modernized LeNet Model with convolution window size adjusted\n",
        "num_epochs = 20\n",
        "valid_loss = [None] * 20\n",
        "training_loss = [None] * 20\n",
        "valid_acc = [None] * 20\n",
        "index = 0\n",
        "for epoch in range(num_epochs):\n",
        "    n_correct_pred = 0\n",
        "    n_samples = 0\n",
        "    for i, (images, labels) in enumerate(train_loader):\n",
        "        images = images.to(device)\n",
        "        labels = labels.to(device)\n",
        "        \n",
        "        outputs = improved_modern_model(images)\n",
        "        loss = lossCriterion(outputs, labels)\n",
        "        \n",
        "        optim3.zero_grad()\n",
        "        loss.backward()\n",
        "        optim3.step()\n",
        "        \n",
        "    with torch.no_grad():\n",
        "        for j, (valImages, valLabels) in enumerate(val_loader):\n",
        "            valImages = valImages.to(device)\n",
        "            valLabels = valLabels.to(device)\n",
        "            outputs = improved_modern_model(valImages)\n",
        "            val_loss = lossCriterion(outputs, valLabels)\n",
        "            _, pred = torch.max(outputs.data, 1)\n",
        "            n_samples += valLabels.size(0)\n",
        "            n_correct_pred += (pred == valLabels).sum().item()\n",
        "    \n",
        "    val_acc = (n_correct_pred / n_samples)\n",
        "    valid_loss[index] = val_loss.item()\n",
        "    training_loss[index] = loss.item()\n",
        "    valid_acc[index] = val_acc\n",
        "    index += 1\n",
        "    if (epoch+1) % 2 == 0:\n",
        "        print(f'Epoch [{epoch+1}/{num_epochs}], train loss: {loss.item():.4f}, val loss: {val_loss.item():.4f}, val_acc: {val_acc:.4f} %')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = [None]*20\n",
        "for i in range(20):\n",
        "  epochs[i] = i+1\n",
        "plt.rcParams[\"figure.figsize\"] = [7.50, 3.50]\n",
        "plt.rcParams[\"figure.autolayout\"] = True\n",
        "\n",
        "plt.title(\"Validation Accuracy/Loss and Training Loss vs No. Epochs\")\n",
        "plt.xlabel(\"Number of epochs\")\n",
        "plt.plot(epochs, valid_acc, label=\"Validation Accuracy\", color=\"red\")\n",
        "plt.plot(epochs, training_loss, label=\"Training Loss\", color=\"purple\")\n",
        "plt.plot(epochs, valid_loss, label=\"Validation Loss\", color=\"Green\")\n",
        "\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "muGnHLr-aS9_",
        "outputId": "a4fdc70f-753c-49d7-a5d9-16ed479f5c03",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        }
      },
      "id": "muGnHLr-aS9_",
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 540x252 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "id": "16d306af",
      "metadata": {
        "id": "16d306af",
        "outputId": "8831f2d1-1e3d-4ad8-a793-72a32813eeee",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [2/20], train loss: 0.4413, val loss: 0.3969, val_acc: 0.8662 %\n",
            "Epoch [4/20], train loss: 0.3137, val loss: 0.3771, val_acc: 0.8884 %\n",
            "Epoch [6/20], train loss: 0.2637, val loss: 0.3143, val_acc: 0.8942 %\n",
            "Epoch [8/20], train loss: 0.3401, val loss: 0.3342, val_acc: 0.8978 %\n",
            "Epoch [10/20], train loss: 0.2066, val loss: 0.3177, val_acc: 0.9083 %\n",
            "Epoch [12/20], train loss: 0.1746, val loss: 0.3331, val_acc: 0.9085 %\n",
            "Epoch [14/20], train loss: 0.2491, val loss: 0.4046, val_acc: 0.9070 %\n",
            "Epoch [16/20], train loss: 0.1953, val loss: 0.3981, val_acc: 0.9080 %\n",
            "Epoch [18/20], train loss: 0.0934, val loss: 0.3151, val_acc: 0.9117 %\n",
            "Epoch [20/20], train loss: 0.1161, val loss: 0.3122, val_acc: 0.9053 %\n"
          ]
        }
      ],
      "source": [
        "#training of improved modernized LeNet Model with number of output channels adjusted for each layer\n",
        "num_epochs = 20\n",
        "valid_loss = [None] * 20\n",
        "training_loss = [None] * 20\n",
        "valid_acc = [None] * 20\n",
        "index = 0\n",
        "for epoch in range(num_epochs):\n",
        "    n_correct_pred = 0\n",
        "    n_samples = 0\n",
        "    for i, (images, labels) in enumerate(train_loader):\n",
        "        images = images.to(device)\n",
        "        labels = labels.to(device)\n",
        "        \n",
        "        outputs = improved_modern_model2(images)\n",
        "        loss = lossCriterion(outputs, labels)\n",
        "        \n",
        "        optim4.zero_grad()\n",
        "        loss.backward()\n",
        "        optim4.step()\n",
        "        \n",
        "    with torch.no_grad():\n",
        "        for j, (valImages, valLabels) in enumerate(val_loader):\n",
        "            valImages = valImages.to(device)\n",
        "            valLabels = valLabels.to(device)\n",
        "            outputs = improved_modern_model2(valImages)\n",
        "            val_loss = lossCriterion(outputs, valLabels)\n",
        "            _, pred = torch.max(outputs.data, 1)\n",
        "            n_samples += valLabels.size(0)\n",
        "            n_correct_pred += (pred == valLabels).sum().item()\n",
        "    \n",
        "    val_acc = (n_correct_pred / n_samples)\n",
        "    valid_loss[index] = val_loss.item()\n",
        "    training_loss[index] = loss.item()\n",
        "    valid_acc[index] = val_acc\n",
        "    index += 1\n",
        "    if (epoch+1) % 2 == 0:\n",
        "        print(f'Epoch [{epoch+1}/{num_epochs}], train loss: {loss.item():.4f}, val loss: {val_loss.item():.4f}, val_acc: {val_acc:.4f} %')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = [None]*20\n",
        "for i in range(20):\n",
        "  epochs[i] = i+1\n",
        "plt.rcParams[\"figure.figsize\"] = [7.50, 3.50]\n",
        "plt.rcParams[\"figure.autolayout\"] = True\n",
        "\n",
        "plt.title(\"Validation Accuracy/Loss and Training Loss vs No. Epochs\")\n",
        "plt.xlabel(\"Number of epochs\")\n",
        "plt.plot(epochs, valid_acc, label=\"Validation Accuracy\", color=\"red\")\n",
        "plt.plot(epochs, training_loss, label=\"Training Loss\", color=\"purple\")\n",
        "plt.plot(epochs, valid_loss, label=\"Validation Loss\", color=\"Green\")\n",
        "\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "aDs-8QkibEC5",
        "outputId": "89a362d4-061a-4149-fcc1-7b3b6725b501",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        }
      },
      "id": "aDs-8QkibEC5",
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 540x252 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "id": "f6bcce41",
      "metadata": {
        "id": "f6bcce41",
        "outputId": "a8778b8f-ec3c-4ae3-fddc-ff9b1e093501",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [2/20], train loss: 0.5075, val loss: 0.4019, val_acc: 0.8432 %\n",
            "Epoch [4/20], train loss: 0.3499, val loss: 0.3444, val_acc: 0.8766 %\n",
            "Epoch [6/20], train loss: 0.2924, val loss: 0.3490, val_acc: 0.8857 %\n",
            "Epoch [8/20], train loss: 0.3105, val loss: 0.3427, val_acc: 0.8829 %\n",
            "Epoch [10/20], train loss: 0.1894, val loss: 0.3137, val_acc: 0.8983 %\n",
            "Epoch [12/20], train loss: 0.1683, val loss: 0.2647, val_acc: 0.8965 %\n",
            "Epoch [14/20], train loss: 0.2581, val loss: 0.2800, val_acc: 0.8888 %\n",
            "Epoch [16/20], train loss: 0.1519, val loss: 0.3462, val_acc: 0.8992 %\n",
            "Epoch [18/20], train loss: 0.1068, val loss: 0.2715, val_acc: 0.9044 %\n",
            "Epoch [20/20], train loss: 0.1174, val loss: 0.3846, val_acc: 0.9062 %\n"
          ]
        }
      ],
      "source": [
        "#training of improved modernized LeNet model with number of convolution layers adjusted (added a layer)\n",
        "num_epochs = 20\n",
        "valid_loss = [None] * 20\n",
        "training_loss = [None] * 20\n",
        "valid_acc = [None] * 20\n",
        "index = 0\n",
        "for epoch in range(num_epochs):\n",
        "    n_correct_pred = 0\n",
        "    n_samples = 0\n",
        "    for i, (images, labels) in enumerate(train_loader):\n",
        "        images = images.to(device)\n",
        "        labels = labels.to(device)\n",
        "        \n",
        "        outputs = improved_modern_model3(images)\n",
        "        loss = lossCriterion(outputs, labels)\n",
        "        \n",
        "        optim5.zero_grad()\n",
        "        loss.backward()\n",
        "        optim5.step()\n",
        "        \n",
        "    with torch.no_grad():\n",
        "        for j, (valImages, valLabels) in enumerate(val_loader):\n",
        "            valImages = valImages.to(device)\n",
        "            valLabels = valLabels.to(device)\n",
        "            outputs = improved_modern_model3(valImages)\n",
        "            val_loss = lossCriterion(outputs, valLabels)\n",
        "            _, pred = torch.max(outputs.data, 1)\n",
        "            n_samples += valLabels.size(0)\n",
        "            n_correct_pred += (pred == valLabels).sum().item()\n",
        "    \n",
        "    val_acc = (n_correct_pred / n_samples)\n",
        "    valid_loss[index] = val_loss.item()\n",
        "    training_loss[index] = loss.item()\n",
        "    valid_acc[index] = val_acc\n",
        "    index += 1\n",
        "    if (epoch+1) % 2 == 0:\n",
        "        print(f'Epoch [{epoch+1}/{num_epochs}], train loss: {loss.item():.4f}, val loss: {val_loss.item():.4f}, val_acc: {val_acc:.4f} %')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = [None]*20\n",
        "for i in range(20):\n",
        "  epochs[i] = i+1\n",
        "plt.rcParams[\"figure.figsize\"] = [7.50, 3.50]\n",
        "plt.rcParams[\"figure.autolayout\"] = True\n",
        "\n",
        "plt.title(\"Validation Accuracy/Loss and Training Loss vs No. Epochs\")\n",
        "plt.xlabel(\"Number of epochs\")\n",
        "plt.plot(epochs, valid_acc, label=\"Validation Accuracy\", color=\"red\")\n",
        "plt.plot(epochs, training_loss, label=\"Training Loss\", color=\"purple\")\n",
        "plt.plot(epochs, valid_loss, label=\"Validation Loss\", color=\"Green\")\n",
        "\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "-jMVuN-XbugX",
        "outputId": "078e49b0-3736-4592-ba55-80d267d64aff",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        }
      },
      "id": "-jMVuN-XbugX",
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 540x252 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 51,
      "id": "12464305",
      "metadata": {
        "id": "12464305",
        "outputId": "2ad6138b-697e-4dbf-d873-036563061b46",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [2/20], train loss: 0.1803, val loss: 0.4039, val_acc: 0.8702 %\n",
            "Epoch [4/20], train loss: 0.2669, val loss: 0.3002, val_acc: 0.8899 %\n",
            "Epoch [6/20], train loss: 0.1946, val loss: 0.2811, val_acc: 0.8985 %\n",
            "Epoch [8/20], train loss: 0.2466, val loss: 0.2872, val_acc: 0.8951 %\n",
            "Epoch [10/20], train loss: 0.1336, val loss: 0.2650, val_acc: 0.9090 %\n",
            "Epoch [12/20], train loss: 0.1269, val loss: 0.2796, val_acc: 0.9069 %\n",
            "Epoch [14/20], train loss: 0.0944, val loss: 0.2615, val_acc: 0.9120 %\n",
            "Epoch [16/20], train loss: 0.1429, val loss: 0.3689, val_acc: 0.9116 %\n",
            "Epoch [18/20], train loss: 0.0832, val loss: 0.3537, val_acc: 0.9073 %\n",
            "Epoch [20/20], train loss: 0.0810, val loss: 0.4110, val_acc: 0.9058 %\n"
          ]
        }
      ],
      "source": [
        "#training of improved modernized LeNet model with number of convolution layers adjusted (removed a layer)\n",
        "num_epochs = 20\n",
        "valid_loss = [None] * 20\n",
        "training_loss = [None] * 20\n",
        "valid_acc = [None] * 20\n",
        "index = 0\n",
        "for epoch in range(num_epochs):\n",
        "    n_correct_pred = 0\n",
        "    n_samples = 0\n",
        "    for i, (images, labels) in enumerate(train_loader):\n",
        "        images = images.to(device)\n",
        "        labels = labels.to(device)\n",
        "        \n",
        "        outputs = improved_modern_model4(images)\n",
        "        loss = lossCriterion(outputs, labels)\n",
        "        \n",
        "        optim6.zero_grad()\n",
        "        loss.backward()\n",
        "        optim6.step()\n",
        "        \n",
        "    with torch.no_grad():\n",
        "        for j, (valImages, valLabels) in enumerate(val_loader):\n",
        "            valImages = valImages.to(device)\n",
        "            valLabels = valLabels.to(device)\n",
        "            outputs = improved_modern_model4(valImages)\n",
        "            val_loss = lossCriterion(outputs, valLabels)\n",
        "            _, pred = torch.max(outputs.data, 1)\n",
        "            n_samples += valLabels.size(0)\n",
        "            n_correct_pred += (pred == valLabels).sum().item()\n",
        "    \n",
        "    val_acc = (n_correct_pred / n_samples)\n",
        "    valid_loss[index] = val_loss.item()\n",
        "    training_loss[index] = loss.item()\n",
        "    valid_acc[index] = val_acc\n",
        "    index += 1\n",
        "    if (epoch+1) % 2 == 0:\n",
        "        print(f'Epoch [{epoch+1}/{num_epochs}], train loss: {loss.item():.4f}, val loss: {val_loss.item():.4f}, val_acc: {val_acc:.4f} %')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 52,
      "id": "860d7288",
      "metadata": {
        "id": "860d7288",
        "outputId": "709b9547-8c9c-47e6-8cb4-1a8e53fcfa70",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 540x252 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "epochs = [None]*20\n",
        "for i in range(20):\n",
        "  epochs[i] = i+1\n",
        "plt.rcParams[\"figure.figsize\"] = [7.50, 3.50]\n",
        "plt.rcParams[\"figure.autolayout\"] = True\n",
        "\n",
        "plt.title(\"Validation Accuracy/Loss and Training Loss vs No. Epochs\")\n",
        "plt.xlabel(\"Number of epochs\")\n",
        "plt.plot(epochs, valid_acc, label=\"Validation Accuracy\", color=\"red\")\n",
        "plt.plot(epochs, training_loss, label=\"Training Loss\", color=\"purple\")\n",
        "plt.plot(epochs, valid_loss, label=\"Validation Loss\", color=\"Green\")\n",
        "\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "XpmQZKPQcqUG"
      },
      "id": "XpmQZKPQcqUG",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.12"
    },
    "colab": {
      "provenance": []
    },
    "accelerator": "GPU",
    "gpuClass": "premium"
  },
  "nbformat": 4,
  "nbformat_minor": 5
}